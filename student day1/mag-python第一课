python的基础语法：
    1、注释
        已#号标注的注释文本
    2、数字
        整数：不区分long 和int
        进制： 0xa:  16进制
              0x10: 八进制
              0b10：二进制
        浮点数：
            1.2，3.141.5，-0.12
        复数：
           1+2j
    3、字符串：
        1、使用 单引号引用的字符串序列
        2、'''和”“”单三引号和双三引号，可以跨行，可以在其中使用单双引号
        3、在字符串前面加上r或者R前缀，表示该字符串不做特殊处理
    基础语法：
        1、转义字符(转义序列)
            \\、\t、\n,\
        2、前缀r,把里面的所有特殊字符当普通字符
        3、缩进
            1、未使用C等语言的花括号，而是使用缩进的方式表示层次关系
            2、约定使用4个空格缩进
        4、续航
            1、在尾部使用“\”
            2、如果使用各种括号，认为括号内是一个整体，内部跨行不用\
    标识符
        1、一个名字，用来指代一个值
        2、只能字母、下划线和数字、
        3、只能以字母和下划线开头
        4、不能是python的关键字，例如def、class就不能作为标识符
        5、Python是大小写敏感的
    约定:
        1、不允许使用中文
        2、不允许使用歧义单词，例如class_
        3、在python中不要随意使用下划线开头的标识符
    常量：
        1、一旦赋值，不能改变值的标识符
        2、python中无法定义常量
    字面常量：
        一个单独的量，例如 12，abc
    变量：
        赋值后可以改变值的标识符
python的语言类型
    1、python是动态语言，强类型语言
    2、静态编译语言
        1、实现标明变量类型，类型不能再改变
        2、编译时检查
    3、动态编译语言
        1、不用事先声明类型，随时可以赋值为其他类型
        2、编译时不知道是什么类型，很难推断
    4、强类型语言
        不通类型之间操作，必须强制转换为同一类型
    5、弱类型语言
        不通类型间可以操作，自动隐式转换，javascript中console.log
运算符：
    1、 + -  *  /   % **
    2、自然除/结果是浮点数，整除 //
        除0异常  1/0
位运算符：
    1、 & | ~ ^ << >>
    2、常用方式：乘除2的倍数 ，32 // 4 相当于 32 >>2，后面效率更高
    3、 12，0xc.0014,0b1100
原码，补码、反码
    源码：
        5 >==0b101 1==>0b1 -1==>-ob1,bin(-1)
    反码：
        正数的反码与源码相同，负数的反码符号位不变，其余按位取反
    补码：
        正数的补码与原码相同，负数的补码符号位不变，其余按位取反后+1
    负数表示法：
        数字电路的cpu中的运算方法实现了加法器后，但没有减法器，减法是转换成加法
        负数在计算机中使用补码来存储，-1的补码11111111
运算符
    == != > < >= <=
    返回一个bool值，不同类型之间比较大小，不可以==和!=
      ‘1’ > '2' 按Asicc码进行比较
链式比较
	4<3<2
逻辑运算符
	与或非  and or not
	短路运算符
		and如果一个表达式为True，后面则没有必要计算，这个逻辑表达式一定是False
		or 如果第一个表达式为True,后面则没有必要进行计算，这个表达式一定是True

赋值运算符
	1、a=min?(3,5)
	2、 += -= *= /= %=
	3、x=y=z=10
成员运算符
	in, not in
身份运算符
	is is not
运算符优先级
	算数运算符 > 位运算符 > 身份运算符 > 成员运算符 >逻辑运算符
	如果记不住 用括号
		表达式多用括号，易懂易读
什么是表达式
	表达式是由 数字、符号、括号、变量等自核
		1、算数表达式
		2、逻辑表达式
		3、赋值表达式
			python中，赋值即定义。如果一个变量没有被定义，赋值相当于重新定义


内存管理
	1、变量无需声明，也不需要指定类型
		1、动态语言的特性
	2、变成中一般无需关心变量的存亡，也不需要关心内存的管理
	3、python中使用引用计数记录所有对象的引用数
		1、当对象的引用数为0时，它就可以被垃圾回收
		2、计数增加：赋值给它的变量就增加引用计数，例如x =3 ,y =3
		3、计数减少
			函数运行结束时，局部变量就会自动销毁，对象引用计数减少
			变量被赋值给其他对象，例如x = 3 , y =x ,x = 4
		4、有关性能的时候，就需要考虑变量的引用问题，但是该释放内存还是不释放内存，看需求
程序控制
	1、顺序
		按照先后顺序一条一条执行
		例如： 先洗手，再吃饭，再洗完
	2、分支
		根据不同的情况判断，条件满足，执行某条件下的语句
		例如：
			先洗手，如果饭好了，就吃饭，如果没有作别的事情
	3、循环
		条件满足就反复执行，不满足就不再执行，或不执行
		例如：
			先洗手，看饭好了没有，没有好，一会过来再看是否好了
	分支机构
		if condition:
			代码块
			condition必须是一个bool值，这个地方有一个隐士转换bool(condition)
		if 1 <2:
			print("1 less than 2")
		代码块
			类似if语句的冒号后面就执行一个语句块
				在if for def class等
真值表
	""     		False
	"string"    True
	0			False
	>=1			True
	<=-1		True
	()			False
	[]			False
	{}			False
	None		False
	False等布尔值，相当于bool(value)
		四大皆空 都是False
			空集合
			空字符串
			空列表
			空元祖
			None
			0
分支语句
	if elif esle语句
	if condition1:
		代码块1
	elif condition2:
		代码块2
	elif  condition3:
		代码块3
	else:
		代码块4
	elif条件可以有多个
	分之条件，满足一个条件就会结束整个语句
循环 while
	while condition:
		block
	当条件满足，及condition语句为True,进入循环体，执行block
循环 for
	for element in iteratable:
		block
	当可迭代对象中有元素可以迭代，进入循环体，执行block
	element:元素
	iteratable：可迭代的
循环continue语句：
	中断当前循环的当次执行，继续下一次循环
循环break
	终止当前循环
循环continue和break
	1、continue和break都是循环控制语句，只影响当前循环，包括for,while
	2、如果循环嵌套，continue和break也只影响语句所在的那一层循环
	3、continue和break不是跳出代码块，所以if condition: break不是跳出if，而是终止if外的break所在循环语句
else字句
	while condition:
		block
	else:
		block
	for element in iteratable:
		block
	else:
		block
	如果循环正常结束，就执行else子句；如果break终止，else子句则不会执行