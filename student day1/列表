内置数据：
	数值类：
		int、float、 compler、 bool
	序列对象：
		字符串：str
		列表:list
		元组:tuple
	键值对：
		set集合
		dict字典
数值型
	1、int、float、complex bool都是class 1、5.0、2+3j都是对象实例
	2、int: python3的int是长整型，且没有大小限制，受限于内存区域的大小
	3、float: 有整数部分和小部分组成，支持十进制和科学计数法表示。只有双精度型。并不能表示3.333....
	4、complex: 由实数和虚数部分组成，实数和虚数部分都是浮点数，3+4.2j
	5、bool: int的子类，仅有2个实例True和False对应1和0，可以和整数直接运算
类型转换（built-in）
	1、int(x)返回一个整数
	2、float(x) 返回一个浮点数
	3、complex(x)、complex(x,y):返回一个复数
	4、bool(x) 返回布尔值，前面讲过的False等价对象
数字的处理函数
	round(),4舍6入，5取偶
	floor()地板，ceil()天花板
	int()取整数，和//整除一样
	举例
		import math
	min()
	max()
	pow(x,y) 等于x**y
	math.sqrt() 几次开放
	进制函数，返回值是字符串
		bin() 2进制
		oct() 8进制
		hex() 16进制
	math.pi π
	math.e  自然常数
类型判断
	type(),返回类型，而不是字符串
	isinstance(obj,class_or_tuple),返回布尔值
	type(a)
	type('abc')
	type(123)
	isinstance(6,str)  返回False  # 6不是字符串
	isinstance(6,(str,bool,int))  # 返回True,数字6属于字符、布尔、int中的一个吗？
	type(1+True) 返回int
	type(1+True+2.0) # 是什么，隐式转换

列表：
	1个队列，一个排列整齐的队伍
	列表内的个体称为元素，由如干个元素组成的列表  元素：item
	元素可以是任意对象(数字、字符串、对象、列表)
	列表内的元素是有顺序的，可以索引
	线性的数据结构
	使用[]表示
	列表是可变的
	列表list、链表、queue、stack的差异
列表list定义，初始化
	1、list()   -->  new empty list
	2、list(iterable) -->new list initialized from iterable
	3、列表不能一开始就定义大小
	示例：
		lst = list()
		lst = []
		lst = [a,b,1,2,]
		lst = list(range(5))
列表的索引
	索引：也叫下标
	正索引：从左到右，从0开始，为列表中每一个元素的编号
	负索引：从右向左，从-1开始
	正负索引不可以超界，负责引发异常indexError
	为了理解方便，可以认为列表是从左至右排列的，左边是头部，右边是尾部，左边是下界，右边为上界

	列表通过索引访问
		list[index],index就是索引，使用中括号访问
列表查询
	index(value,[start,[stop]])
		通过值value,从指定区间超找列表内的元素是否匹配
		匹配第一个就理解放回索引
		匹配不到，抛出ValueError
	count(value)
		返回列表中疲累的vlaue的次数
	时间复杂度
		index和count方法都是O(n),n代表次数，两层循环n**2，三层循环n**3
		随着列表数据规模的增大，而效率降低
	如何返回列表元素的个数？如何遍历，如何设计高效？
		len()
帮助查找
	ipython中
		help(keyword)
		keyword可以是变量、对象、类名、函数名、方法名
列表元素修改
	list[index] = value
	索引不能超界
列表的增加、插入元素
	append(object)-->none
		列表尾部追加元素，返回None
		返回None就意味着没有新列表的产生，就地修改
		时间复杂度是O(1)
	insert(index,object) -->none
		在指定的索引index处插入元素object
		返回None就意味着没有新列表的产生，就地修改
		时间复杂度是O(1)，不确定
		索引能超上下界吗？
			超越上界，尾部追加
			超越下界，头部添加
	extend(itertable)-->
		将可迭代对象的元素追加进来，返回None
		就地修改
	+  -->list
		连接操作，将两个列表连接起来
		产生新的列表，原列表不变
		本质上调用的是_add_()方法
	-  -->list
		重复操作，将本列表元素重复N次，返回新的列表

	remove(value) ->none
		从左到右查找第一个匹配的value的值，移除
		就地修改
		效率？
	pop([index]) ->item
		不指定索引index，就从列表尾部弹出一个元素
		指定索引index,就从索引处弹出一个元素
		效率？指定索引的时间复杂度？不指定索引的时间复杂度？建议少用index索引删除
	clear() -->none
		清除所有的元素，剩下一个空列表

	reversed()  ->none
		将列表反转，返回None
		就地修改
	sort(key=none,revers = False)  ->none
		对列表进行排序没，就地修改，默认升序
		revers为True,反转，降序
		key 一个函数，指定key如何排序
			lst.sort(key=functionname)
			例子：
				如果无法排序，指定key修改为统一的类型，再进行排序
				lst.sort(key=str,revers=True)
				lst.sort(revers=True)
	in
		[3,4] in [1,2,[3,4]]
		for x in [1,2,3,4]
		例子：
			if [3,4] in [1,2,[3,4]]:
				pass
	列表复制
		lst0 = list(range(4))
		lst2 = list(range(4))
		lst0 == lst2  返回True,==拿内容进行比较
		lst1 = lst0   is相当于id
		lst0 is lst1  False,那内存位置
		lst1[2] = 10
		请问lst0的索引为2的元素值是什么？
		请问lst1 = lst0这个过程中有没有复制过程？没有

		copy()  ->list
			shadow copy 返回一个新的列表
			例子：
				lst0 = list(range(4))
				lst5 = lst0.copy()
				lst5 == lst0  返回True,因为==是内容相等
				lst5 is ls0   返会False,id不相同
				ls5[2] = 10
				lst和lst5一样吗？ 不一样

			例子2：
				lst0 = [1,[2,3,4],5]
				lst5 = lst0.copy()
				lst5 == lst0     True
				lst5[2] =10
				lst5 ==lst0  True
				lst5[2] = 5
				lst5[1][1] = 20
				lst5 == lst0  True

	列表是不可哈希的
